{"pages":[{"title":"about","text":"这是关于的页面，可以在这里向世界介绍你！","link":"/about/index.html"},{"title":"photos","text":"","link":"/photos/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/06/14/hello-world/"},{"title":"Android预览pdf文档","text":"谷歌为我们提供了PdfRender工具类对pdf文档进行渲染，首先看一下PdfRender的构造方法： 123456789101112131415161718192021222324/** * Creates a new instance. * &lt;p&gt; * &lt;strong&gt;Note:&lt;/strong&gt; The provided file descriptor must be &lt;strong&gt;seekable&lt;/strong&gt;, * i.e. its data being randomly accessed, e.g. pointing to a file. * &lt;/p&gt; * &lt;p&gt; * &lt;strong&gt;Note:&lt;/strong&gt; This class takes ownership of the passed in file descriptor * and is responsible for closing it when the renderer is closed. * &lt;/p&gt; * &lt;p&gt; * If the file is from an untrusted source it is recommended to run the renderer in a separate, * isolated process with minimal permissions to limit the impact of security exploits. * &lt;/p&gt; * * @param input Seekable file descriptor to read from. * * @throws java.io.IOException If an error occurs while reading the file. * @throws java.lang.SecurityException If the file requires a password or * the security scheme is not supported. */public PdfRenderer(@NonNull ParcelFileDescriptor input){ //略...} 可以看构造方法中的参数是ParcelFileDescriptor的一个实例，那么ParcelFileDescriptor类是做什么的呢？ParcelFileDescriptor是Android提供的一种数据结构，支持数据的写入和写出。我们通过ParcelFileDescriptor#open生成ParcelFileDescriptor对象： 1234567891011121314151617181920/** * Create a new ParcelFileDescriptor accessing a given file. * * @param file The file to be opened. * @param mode The desired access mode, must be one of * {@link #MODE_READ_ONLY}, {@link #MODE_WRITE_ONLY}, or * {@link #MODE_READ_WRITE}; may also be any combination of * {@link #MODE_CREATE}, {@link #MODE_TRUNCATE}, * {@link #MODE_WORLD_READABLE}, and * {@link #MODE_WORLD_WRITEABLE}. * @return a new ParcelFileDescriptor pointing to the given file. * @throws FileNotFoundException if the given file does not exist or can not * be opened with the requested mode. * @see #parseMode(String) */ public static ParcelFileDescriptor open(File file, int mode) throws FileNotFoundException { final FileDescriptor fd = openInternal(file, mode); if (fd == null) return null; return new ParcelFileDescriptor(fd); } 从该方法中可以看出ParcelFileDescriptor#open实际操作的是FileDescriptor，仔细阅读FileDescriptor的注释，FileDescriptor是文件操作符。FileDescriptor可以用来表示开放文件、开放套接字。以FileDecriptor表示文件来说，当FileDescroptor表示某文件 时，我们可以通俗的将FileDescriptor看成是该文件。但是，我们不能直接通过FileDescription对该文件进行操作；若需要通过FileDescriptor对该文件进行操作，则需要新创建FileDescriptor对应的FileOutputSteam，再对文件进行操作。这里有对FileDescription的详细描述。 12345678 ParcelFileDescriptor mFileDescriptor; PdfRenderer mPdfRenderer; //根据文件对象创建mFileDescriptor = ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY); // This is the PdfRenderer we use to render the PDF. if (mFileDescriptor != null) { mPdfRenderer = new PdfRenderer(mFileDescriptor); } 打开pdf指定页面和生成当前页面的Bitmap展示： 12345678910111213141516171819202122private PdfRenderer.Page mCurrentPage;private void showPage(int index) { if (mPdfRenderer.getPageCount() &lt;= index) { return; } // Make sure to close the current page before opening another one. if (null != mCurrentPage) { mCurrentPage.close(); } // Use `openPage` to open a specific page in PDF. mCurrentPage = mPdfRenderer.openPage(index); // Important: the destination bitmap must be ARGB (not RGB). Bitmap bitmap = Bitmap.createBitmap(mCurrentPage.getWidth(), mCurrentPage.getHeight(),Bitmap.Config.ARGB_8888); // Here, we render the page onto the Bitmap. // To render a portion of the page, use the second and third parameter. Pass nulls to get // the default result. // Pass either RENDER_MODE_FOR_DISPLAY or RENDER_MODE_FOR_PRINT for the last parameter. mCurrentPage.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY); // We are ready to show the Bitmap to user. mImageView.setImageBitmap(bitmap); updateUi();} 渲染pdf代码，pdf文档来源于assets目录下","link":"/2019/06/14/Android预览pdf文档/"}],"tags":[{"name":"Android","slug":"Android","link":"/tags/Android/"}],"categories":[{"name":"Android开发笔记","slug":"Android开发笔记","link":"/categories/Android开发笔记/"}]}